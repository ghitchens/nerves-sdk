# Firmware configuration file for the AG150 (Atom N2800) and PcEngines Alix (Geode)

define(FINALIZE_FW, "/tmp/finalize.fw")

# Default ROOTFS if not specified
define(ROOTFS, "${NERVES_ROOT}/buildroot/output/images/rootfs.ext2")

# Image layout
# +------------------------+
# | MBR                    |
# +------------------------+
# | Boot partition (FAT12) |
# | syslinux.cfg           |
# | bzImage                |
# +------------------------+
# | Rootfs A (EXT4)        |
# +------------------------+
# | Rootfs B (EXT4)        |
# +------------------------+
# | Application (EXT4)     |
# +------------------------+

# The boot partition contains syslinux, 2 Linux kernels,
# and the bootloader configuration. 16 MB should be plenty.
define(BOOT_PART_OFFSET, 63)
define(BOOT_PART_COUNT, 31232)

# Let the rootfs have room to grow up to 128 MiB
define(ROOTFS_A_PART_OFFSET, 32768)
define(ROOTFS_A_PART_COUNT, 262144)
define(ROOTFS_B_PART_OFFSET, 294912)
define(ROOTFS_B_PART_COUNT, 262144)

# Application partition. This partition can occupy all of the
# remaining space. Size it to fit the destination.
define(APP_PART_OFFSET, 557056)
define(APP_PART_COUNT, 2097152)

# Firmware metadata
meta-product = "Nerves Demo Image for the PcEngines Alix"
meta-description = "This image boots to an Erlang prompt."
meta-version = ${NERVES_SDK_VERSION}
meta-platform = "alix"
meta-architecture = "x86"
meta-author = "Frank Hunleth"

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.
file-resource bootpart.bin {
    host-path = "${NERVES_ROOT}/buildroot/output/images/bootpart.bin"
}
file-resource syslinux.cfg {
    host-path = "${NERVES_ROOT}/board/alix/syslinux.cfg"
}
file-resource bzImage {
    host-path = "${NERVES_ROOT}/buildroot/output/images/bzImage"
}
file-resource rootfs.ext2 {
    host-path = ${ROOTFS}
}

mbr mbr-a {
    bootstrap-code-host-path = "${NERVES_ROOT}/buildroot/output/images/syslinux/mbr.bin"
    partition 0 {
        block-offset = ${BOOT_PART_OFFSET}
        block-count = ${BOOT_PART_COUNT}
        type = 0x1 # FAT12
        boot = true
    }
    partition 1 {
        block-offset = ${ROOTFS_A_PART_OFFSET}
        block-count = ${ROOTFS_A_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 2 {
        block-offset = ${ROOTFS_B_PART_OFFSET}
        block-count = ${ROOTFS_B_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 3 {
        block-offset = ${APP_PART_OFFSET}
        block-count = ${APP_PART_COUNT}
        type = 0x83 # Linux
    }
}

mbr mbr-b {
    bootstrap-code-host-path = "${NERVES_ROOT}/buildroot/output/images/syslinux/mbr.bin"
    partition 0 {
        block-offset = ${BOOT_PART_OFFSET}
        block-count = ${BOOT_PART_COUNT}
        type = 0x1 # FAT12
        boot = true
    }
    partition 1 {
        block-offset = ${ROOTFS_B_PART_OFFSET}
        block-count = ${ROOTFS_B_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 2 {
        block-offset = ${ROOTFS_A_PART_OFFSET}
        block-count = ${ROOTFS_A_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 3 {
        block-offset = ${APP_PART_OFFSET}
        block-count = ${APP_PART_COUNT}
        type = 0x83 # Linux
    }
}

# This firmware task writes everything to the destination media
task complete {
    # Only match if not mounted
    require-unmounted-destination = true

    # Everything that gets written can be verified on the fly.
    # This speeds things up, since we don't care about detecting
    # errors before data gets written.
    verify-on-the-fly = true

    on-init {
        mbr_write(mbr-a)
    }

    on-resource bootpart.bin { raw_write(${BOOT_PART_OFFSET}) }
    on-resource syslinux.cfg { fat_write(${BOOT_PART_OFFSET}, "syslinux.cfg") }
    on-resource bzImage { fat_write(${BOOT_PART_OFFSET}, "bzImage") }

    on-resource rootfs.ext2 {
        # write to the first rootfs partition
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    on-finish {
    }
}

task upgrade.a {
    # This task upgrades the A partition
    require-partition1-offset = ${ROOTFS_B_PART_OFFSET}

    # Since the upgrade won't run until it has been finalized, it's ok
    # to write data as it is read.
    verify-on-the-fly = true

    on-init {
    }

    on-resource zImage {
        fat_rm(${BOOT_PART_OFFSET}, "zImage.pre")

        # write to the fat partition
        fat_write(${BOOT_PART_OFFSET}, "zImage.new")
    }

    on-resource rootfs.ext2 {
        # write to the first rootfs partition
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    on-finish {
        # Until this .fw is run, the system will still boot to the old firmware
        fw_create(${FINALIZE_FW})
        # Add an empty file to flag mbr-a to be written
        fw_add_local_file(${FINALIZE_FW}, "write.mbr-a", "/dev/null")
    }

    on-error {
        # Clean up in case something goes wrong
        fat_rm(${BOOT_PART_OFFSET}, "zImage.new")
        fat_rm(${BOOT_PART_OFFSET}, ${FINALIZE_FW})
    }
}

task upgrade.b {
    # This task upgrades the B partition
    require-partition1-offset = ${ROOTFS_A_PART_OFFSET}

    # Since the upgrade won't run until it has been finalized, it's ok
    # to write data as it is read.
    verify-on-the-fly = true

    on-init {
    }

    on-resource zImage {
        fat_rm(${BOOT_PART_OFFSET}, "zImage.pre")

        # write to the fat partition
        fat_write(${BOOT_PART_OFFSET}, "zImage.new")
    }

    on-resource rootfs.ext2 {
        # write to the first rootfs partition
        raw_write(${ROOTFS_B_PART_OFFSET})
    }

    on-finish {
        # Until this .fw is run, the system will still boot to the old firmware
        fw_create(${FINALIZE_FW})
        # Add an empty file to flag mbr-b to be written
        fw_add_local_file(${FINALIZE_FW}, "write.mbr-b", "/dev/null")
    }

    on-error {
        # Clean up in case something goes wrong
        fat_rm(${BOOT_PART_OFFSET}, "zImage.new")
        fat_rm(${BOOT_PART_OFFSET}, ${FINALIZE_FW})
    }
}

# This action is intended to be called from ${FINALIZE_FW} after the "upgrade" task
# has been run. It requires the "write.mbr-a" or "write.mbr-b" resources to exist
# and those don't exist until the "upgrade" task makes them.
task on-reboot {
    on-resource write.mbr-a {
        mbr_write(mbr-a)
    }
    on-resource write.mbr-b {
        mbr_write(mbr-b)
    }
    on-finish {
        fat_mv(${BOOT_PART_OFFSET}, "zImage", "zImage.pre")
        fat_mv(${BOOT_PART_OFFSET}, "zImage.new", "zImage")
    }
}
